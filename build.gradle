buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.google.cloud.tools:appengine-gradle-plugin:$appEnginePluginVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.freefair.gradle:lombok-plugin:4.1.3"
    }
}

plugins {
    id 'idea'
    id 'groovy'
    id 'java'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'io.franzbecker.gradle-lombok' version '3.2.0'
}

apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: "com.google.cloud.tools.appengine-appyaml"
apply plugin: 'jacoco'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

wrapper {
    //intellij seems to prefer the all distribution
    distributionType = Wrapper.DistributionType.ALL
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        mavenBom 'com.google.cloud:google-cloud-bom:0.83.0-alpha'
    }
}

dependencies {

    compile(
            'org.springframework.boot:spring-boot-starter-actuator',
            "org.springframework.boot:spring-boot-starter-hateoas",
            "com.google.appengine:appengine-api-1.0-sdk:${appengineVersion}",
            'com.google.cloud:google-cloud-pubsub',
            'com.google.cloud:google-cloud-logging-logback:0.106.0-alpha',
            "org.slf4j:log4j-over-slf4j:${slf4jVersion}", // routes all log4j logging to slf4j
            "org.slf4j:jcl-over-slf4j:${slf4jVersion}",    // routes all commons logging to slf4j
            'com.google.cloud:google-cloud-datastore',
            'joda-time:joda-time:2.10.5',
            'com.fasterxml.jackson.datatype:jackson-datatype-joda',
    )

    configurations {
        all*.exclude group: 'ca.juliusdavies', module: 'not-yet-commons-ssl'
        all*.exclude group: "org.apache.velocity", module: "velocity"
    }

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile('com.googlecode.objectify:objectify:6.0.4') {
        exclude group: 'com.google.cloud', module: 'google-cloud-datastore'
    }

    compile("org.springframework.boot:spring-boot-starter-jetty")

    runtime(
            'org.apache.httpcomponents:httpclient:4.5.7',
            //this api client stuff doesn't get transitively pulled in, but we need it for auth
            "com.google.api-client:google-api-client:${googleApiClientVersion}",
            "com.google.api-client:google-api-client-appengine:${googleApiClientVersion}",
            "com.google.api-client:google-api-client-servlet:${googleApiClientVersion}",
    )

    compile "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion"

    dependencies {
        testCompile(
                "org.codehaus.groovy:groovy-all:${groovyVersion}",
                "org.spockframework:spock-core:${spockSpringVersion}",
                'com.athaydes:spock-reports:1.6.2',
                "org.spockframework:spock-spring:${spockSpringVersion}",
                "org.springframework.boot:spring-boot-starter-test",
                "com.google.appengine:appengine-testing:${appengineVersion}",
                "junit:junit",
        )
    }

}

if (!project.hasProperty('googleProjectId')) {
    ext {
        googleProjectId = "appengine-template-project-local"
    }
}

appengine {
    deploy {   // deploy configuration, more in the gradle profiles
        stopPreviousVersion = true  // default - do not stop the current version
        promote = true
        version = 'trial'
        projectId = googleProjectId
    }
}

project.afterEvaluate {
    bootRun {
        jvmArgs = ['-Dspring.profiles.active=local',
                   "-DGOOGLE_CLOUD_PROJECT=${googleProjectId}".toString()]
    }
}

task codeCoverageReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData test
    reports {
        html.destination file("${reportsDir}/jacoco")
    }

    // This should match whatever is in sonar exclusions to ignore java files.
    afterEvaluate {
        getClassDirectories().from(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/TestApp**'
            ])
        })
    }

    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    test
}

task publishCodeCovReport(dependsOn: codeCoverageReport, type: Exec) {
    commandLine "bash", "<(curl -s https://codecov.io/bash)"
}